generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model abilities {
  id                Int                 @id
  identifier        String              @db.VarChar(79)
  pokemon_abilities pokemon_abilities[]
}

model moves {
  id            Int             @id
  identifier    String          @db.VarChar(79)
  type_id       Int
  power         Int?
  pp            Int?
  accuracy      Int?
  priority      Int
  types         types           @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pokemon_moves pokemon_moves[]
}

model pokemon {
  id                Int                 @id
  identifier        String              @db.VarChar(79)
  species_id        Int?
  height            Int
  weight            Int
  base_experience   Int
  order             Int
  pokemon_species   pokemon_species?    @relation(fields: [species_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pokemon_abilities pokemon_abilities[]
  pokemon_moves     pokemon_moves[]
  pokemon_stats     pokemon_stats[]
  pokemon_types     pokemon_types[]
  squad_pokemon     squad_pokemon[]
  trainer           trainer[]
}

model pokemon_abilities {
  pokemon_id Int
  ability_id Int
  is_hidden  Boolean
  slot       Int
  abilities  abilities @relation(fields: [ability_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pokemon    pokemon   @relation(fields: [pokemon_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([pokemon_id, slot])
}

model pokemon_moves {
  pokemon_id Int
  move_id    Int
  level      Int
  order      Int?
  moves      moves   @relation(fields: [move_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pokemon    pokemon @relation(fields: [pokemon_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([pokemon_id, move_id, level])
}

model pokemon_species {
  id                      Int               @id
  identifier              String            @db.VarChar(79)
  evolves_from_species_id Int?
  is_baby                 Boolean
  forms_switchable        Boolean
  is_legendary            Boolean?
  order                   Int
  pokemon_species         pokemon_species?  @relation("pokemon_speciesTopokemon_species_evolves_from_species_id", fields: [evolves_from_species_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pokemon                 pokemon[]
  other_pokemon_species   pokemon_species[] @relation("pokemon_speciesTopokemon_species_evolves_from_species_id")
}

model pokemon_stats {
  pokemon_id Int
  stat_id    Int
  base_stat  Int
  effort     Int
  pokemon    pokemon @relation(fields: [pokemon_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stats      stats   @relation(fields: [stat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([pokemon_id, stat_id])
}

model pokemon_types {
  pokemon_id Int
  type_id    Int
  slot       Int
  pokemon    pokemon @relation(fields: [pokemon_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  types      types   @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([pokemon_id, slot])
}

model squad {
  id            Int             @id
  identifier    String          @db.VarChar(79)
  is_complete   Boolean
  trainer_id    Int
  squad_pokemon squad_pokemon[]
}

model squad_pokemon {
  pokemon_id Int
  squad_id   Int
  slot       Int
  pokemon    pokemon @relation(fields: [pokemon_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  squad      squad   @relation(fields: [squad_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([squad_id, slot])
}

model stats {
  id             Int             @id
  identifier     String          @db.VarChar(79)
  is_battle_only Boolean
  game_index     Int?
  pokemon_stats  pokemon_stats[]
}

model trainer {
  id          Int      @id
  name        String   @db.VarChar(79)
  email       String   @unique @db.VarChar(79)
  password    String   @db.VarChar(70)
  avatar      String?  @db.VarChar(255)
  favorite_id Int?
  pokemon     pokemon? @relation(fields: [favorite_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model types {
  id            Int             @id
  identifier    String          @db.VarChar(79)
  moves         moves[]
  pokemon_types pokemon_types[]
}
